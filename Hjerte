class Hjerte
{
  
  float hvilePuls;
  float hvileSys;
  float hvileDia;
  
  int brugsPuls;
  
float puls;
float diaTryk;
float sysTryk;
PVector pos;

Boolean doed = false;

ArrayList<Stof> stoffer = new ArrayList<Stof>();

PShape hjerte;

boolean loeber;
float loebeTimer;
float loebeYPuls;

float efterLoebTimer;

boolean sysDiaLoeb;

  public Hjerte(PVector pos, float hvilePuls, float hvileSys, float hvileDia)
  {
    hjerte = loadShape("heart2.obj");
    
    puls = 80;
    diaTryk = 70;
    sysTryk = 110;
    brugsPuls = int(puls);
    
    this.pos = pos;
    
//String navn, String enhed, float vaerdi, int orden, float k, float cutoff
    stoffer.add(new Stof("Alkohol", "Genstande", 0, 0, (1/2.0)/(60*60), 0.01));
    stoffer.add(new Stof("Nikotin", "Cigaretter", 0, 1, log(2)/(2*60*60), 0.01));

    loeber = false;
    loebeTimer = 0;
    
    sysDiaLoeb = false;
    
    efterLoebTimer = 0;
    
    this.hvilePuls = hvilePuls;
    this.hvileSys = hvileSys;
    this.hvileDia = hvileDia;
  }
  
  void UpdateData(float multiplier)
  {
    
    loebeTimer += multiplier / 30;   
    
    if(!loeber && sysDiaLoeb)
    {
     efterLoebTimer += multiplier / 30; 
    }
    
   for(int i = 0; i < stoffer.size(); i++)
   {
     stoffer.get(i).tid += (1/30.0) * multiplier;
     stoffer.get(i).Update();
    
    if(stoffer.get(i).vaerdi < stoffer.get(i).cutoff)
    {
      stoffer.get(i).vaerdi = 0;
    }
    
    
   }


  puls = GetPuls();
  sysTryk = GetSys();
  diaTryk = GetDia();

  }
  
  float GetSys()
  {
  float tempV = 0;
  
  tempV += 0.1 * ((182.41)/(1+0.66*exp(-0.13*stoffer.get(1).vaerdi))) - 11;
  
  if(tempV < 0)
  {
   tempV = 0; 
  }
  
  //loeb
  
  float aNed = 1.5;
  float aOp = 1/8.0;
  
  if(sysDiaLoeb)
  {
    if(efterLoebTimer < 10*60) //På vej ned
    {
      tempV -= (efterLoebTimer / 60.0) * aNed;
    }
    else if(efterLoebTimer <= 260*60) //stille 
    {
      tempV -= 10 * aNed;
    }
    else if(efterLoebTimer < 380*60) //på vej op
    {
      tempV += ((efterLoebTimer / 60.0) - 260) * aOp - (10 * aNed);
    }
    else // tilbage til standard
    {
      sysDiaLoeb = false;
      efterLoebTimer = 0;
      tempV += 0;
    }
  }

  
  
    return tempV + hvileSys;
    
  }
  
  float GetDia()
  {
  float tempV = 0;
  //0.1 * ((182.41)/(1+0.66*exp(-0.13*stoffer.get(1).vaerdi))) - hvileSys;
  tempV += 0.1 * ((106.77)/(1+0.52*exp(-0.17*stoffer.get(1).vaerdi))) - hvileDia + 63;

  //loeb
  
  float aNed = 0.4;
  float aOp = 1/30.0;
  
  if(sysDiaLoeb)
  {
    if(efterLoebTimer < 10*60) //På vej ned
    {
      tempV -= (efterLoebTimer / 60.0) * aNed;
    }
    else if(efterLoebTimer <= 260*60) //stille 
    {
      tempV -= 10 * aNed;
    }
    else if(efterLoebTimer < 380*60) //på vej op
    {
      tempV += ((efterLoebTimer / 60.0) - 260) * aOp - (10 * aNed);
    }
    else // tilbage til standard
    {
      sysDiaLoeb = false;
      efterLoebTimer = 0;
      tempV += 0;
    }
  }
  
    return tempV + hvileDia;
    
  }
  
  float StofferPuls() //LAV
  {
    float tempV = 0;
    
    tempV += stoffer.get(0).vaerdi * 1.5; // Alkohol/Genstande 
    tempV += (-(stoffer.get(1).vaerdi * stoffer.get(1).vaerdi) * 0.114 + 5.143 * stoffer.get(1).vaerdi); // Nikotin/Cigaretter 
    
    
    return tempV;
  }
  
  float GetPuls()
  {
    //beregn puls
  
    float tempV = StofferPuls();
    
    float loebeP;
    
    if(loeber)
    {
      loebeP = loebeYPuls + (22 / 60.0)*loebeTimer;
    }
    else
    {
      loebeP = loebeYPuls + (-11 / 60.0)*loebeTimer;
      
    }
      
      
      
      if(loebeP + tempV + hvilePuls > 170)
      {
        return 170;
      }
      else
      {
        if(loebeP > 0)
        {
          return hvilePuls + tempV + loebeP;
        }
        else
        {
         return hvilePuls + tempV;
        }
        
      }
      
     
  }
  
  void LavIndgreb(Indgreb indgreb)
  {
    //check for stofændring indreb
    for(int i = 0; i < stoffer.size(); i++)
    {
      if(stoffer.get(i).navn == indgreb.stofPaavirkning)
      {
       //lav indgreb
       stoffer.get(i).Add(indgreb.tilfoersel);
        
      }
    }
  }
  
  void SetLoeb(boolean loeb)
  {
    if(loeb)
    {
      if(!loeber)
      {

        OpdaterLoebeInfo();
        loebeTimer = 0;
        loeber = true;
        
      }
    }
    else
    {
      if(loeber)
      {
        OpdaterLoebeInfo();
        
        loebeTimer = 0;
        loeber = false;
        sysDiaLoeb = true;
      }
    }
  }
  
  void OpdaterLoebeInfo()
  {
    if(loeber)
    {
      float tempPuls = GetPuls();
      loebeYPuls = loebeYPuls + (22 / 60.0)*loebeTimer;
      
      if(tempPuls >= 170)
      {
        loebeYPuls = 170 - (hvilePuls + StofferPuls());
      }
    }
    else
    {
      if(loebeYPuls + (-11 / 60.0)*loebeTimer < 0)
      {
        loebeYPuls = 0;
      }
      else
      {
        loebeYPuls = loebeYPuls + (-11 / 60.0)*loebeTimer;
        
      }
      
      
    }
  }
  
  float RoundToDecimalPoints(float x, int n)
  {
    float temp = x;
    temp *= pow(10, n);
    temp = round(temp);
    temp /= pow(10, n);
    return temp;
  }
  
  void Draw()
  {
   UpdateData(tidsMultiplier);
   
   
   
    push();
    
    lights();
    ambientLight(255, 0, 0);
    
    if (frameCount % 45 == 0) //den brugte puls bliver opdateret hver 45-frame for at undgå problemer når pulsen ændre sig hurtigt
    {
     brugsPuls = int(puls); 
    }
    

    if (stoffer.get(0).vaerdi + stoffer.get(1).vaerdi >= 45 || stoffer.get(1).vaerdi >= 40 || stoffer.get(0).vaerdi >= 15)  //kriterier for død
    {
      doed = true;
     puls = 0;
     brugsPuls = 0; 
         camera(pos.x, pos.y, -330, pos.x+150, pos.y+100, 0, 0, 1, 0);
    }
    else
    {
      doed = false;
    
    if(brugsPuls == 0)
    {
      brugsPuls = int(puls);
    }
    
    camera(pos.x, pos.y, ((height/2.0)-300-pow((sin(radians(frameCount*12*brugsPuls/60))+sin(radians(frameCount*12*brugsPuls/60)-1.45)*sin(radians(frameCount*12*brugsPuls/60))),10)*2.2/(brugsPuls/60))-420, pos.x+150, pos.y+100, 0, 0, 1, 0);
    
    }
    
    translate(pos.x, pos.y);
    
    noFill();
    rotateZ(radians(180));
    rotateY(radians(frameCount)/2);
   
    shape(hjerte, 0, 0);
    pop();
    textSize(32);
    textAlign(CENTER);
    
    if (doed == false)
    {
     text(round(puls) + " BPM", pos.x, pos.y + 100);
    }
    else
    {
     text(round(puls) + " BPM (DØD)", pos.x+40, pos.y + 100); 
    }
    
     text(RoundToDecimalPoints(sysTryk, 1) + "/" + RoundToDecimalPoints(diaTryk, 1) + " mmHG", pos.x, pos.y + 150);
    
  }
  
}
